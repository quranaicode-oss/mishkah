# 📑 المخطط الفني الرسمي — POS على Mishkah v5 (إصدار مُعاد صياغته)

**المشروع:** نظام إدارة المطاعم (RMS)

**الوحدة الأساسية:** شاشة نقطة البيع (POS)

**المرجع:** هذا المستند هو المصدر الرسمي للفريق. يربط بين فلسفة Mishkah v5 (Truth + Regions + Guardian) وبين معايير POS العالمية، مع توصيف مُفصّل للمكوّنات، البيانات، التدفقات، الأداء، الوصولية، والطباعة.

---

## 1) المبادئ الحاكمة (Mishkah v5)

1. **الحقيقة الواحدة (Single Source of Truth)**: كل الحالة عبر `app.truth`. تحديث الحالة حصريًا عبر `truth.set()` وضمن دفعات `truth.batch()`.
2. **المناطق الجراحية (Surgical Regions)**: كل جزء UI مسجَّل كـ Region مستقل. بعد أي تغيير، استخدم `truth.mark('<region>')` لأصغر منطقة متأثرة فقط.
3. **الرقيب والأداء (Guardian & Budget)**: عيّن ميزانية زمنية لكل Region، خاصة المناطق الساخنة (قوائم/شبكات/لوحات). القاعدة: **≤16ms** لكل إطار. راقب عبر `app.devtools.printSummary()`.
4. **التفويض للأحداث**: لا `addEventListener` يدويًا؛ استعمل سمات `data-on*` لربط الأوامر.
5. **البيئة (env) والتنسيق**: `env.toggleTheme()`، `env.setLocale()`, `env.toggleDir()`؛ الاعتماد على `tw` من Mishkah لتوافق RTL/LTR و Light/Dark تلقائيًا.
6. **Atoms ثم Comp**: لا تبني عناصر خام مباشرة إن وُجد مكوّن. استخدم Comp.mole/tissue لبناء مكوّنات قابلة لإعادة الاستخدام.

---

## 2) معايير UX/UI العامة

- **ملء الشاشة 100%**، شبكة 12 عمودًا: يمين (القائمة) 7–8 أعمدة، يسار (الطلب) 4–5 أعمدة. شريط إجراءات سفلي ثابت.
- **أيقونات شبيهة بالإيموجي** (رموز خفيفة الوزن SVG/Unicode) بدل مكتبات ثقيلة.
- **أحجام لمس**: ارتفاع أزرار ≥44px. تباعد داخلي سخي. ظلال ناعمة. حواف 2xl.
- **الوضع الليلي/النهاري**: تبديل فوري، تباين كافٍ، ألوان علامة تجارية.
- **الوصولية**: دعم لوحة المفاتيح، تركيز مرئي، `aria-*`, `role`, `aria-modal`, `aria-labelledby`.
- **الأداء**: virtualization للقوائم >50 عنصرًا، lazy-images، دفعات truth.

---

## 3) نموذج البيانات المركزي (Data Model)

> المصدر: `database/` + `mock-data.js` (للبيانات الافتراضية أثناء التطوير).

### 3.1 الأصناف (Item)
- `id:number`
- `category:string`
- `translations:{ ar:{name,description}, en:{name,description} }`
- `price:number`
- `image?:string` `gallery?:string[]`
- `modifiers_profile_id?:string` (يربط ملف الإضافات/المنزوعات المناسب للصنف)
- `tax_group?:string`

### 3.2 المُعدِّلات (ModifiersProfile)
- `id:string`
- `groups: Array<{
  id:string,
  label:{ar,en},
  type:'addon'|'removal'|'sub'|'size',
  selection:'single'|'multi',
  min?:number, max?:number,
  items:Array<{ id:number, label:{ar,en}, priceDelta?:number, defaultIncluded?:boolean }>
}>`

### 3.3 الطاولات والحجوزات
**Table**
- `id:string`, `name:string`, `section?:string`, `seats:number`
- `status:'free'|'occupied'|'cleaning'|'locked'`
- `locked_by?:{ type:'reservation'|'order', id:string }`

**Reservation**
- `id:string`, `customer:{name,phone}`, `table_ids:string[]`, `headcount:number`
- `time:{ start:ISO, end:ISO }`, `status:'pending'|'active'|'canceled'|'done'`
- قواعد: قفل الطاولات في نافذة الحجز، تحقق السعة: مجموع مقاعد الطاولات ≥ headcount.

### 3.4 العملاء والتوصيل
**Customer**
- `id:string`, `name`, `phone`, `notes?`
- `addresses:Array<{ id, label, line1, area, city, geo? }>`

**Driver**
- `id`, `name`, `phone`, `vehicle?`, `status:'idle'|'on_delivery'`

### 3.5 الطلب والمدفوعات
**Order**
- `id:string`, `type:'dine_in'|'takeaway'|'delivery'`
- `table_ids?:string[]`, `customer?:CustomerRef`, `driver_id?:string`
- `status:'new'|'in_preparation'|'prepared'|'delivered'|'paid'`
- `lines:Array<OrderLine>`
- `discount_total:number`
- `service:number`, `delivery_fee:number`, `vat:number`, `grand_total:number`
- `shift_id?:string`, `cashier?:EmployeeRef`
- `created_at`, `updated_at`

**OrderLine**
- `id`, `item_id:number`, `title`, `qty:number`, `price:number`
- `mods:{ addons:number[], removals:number[], subs?:number[], size?:number }`
- `modDelta:number` (∑ priceDelta)
- `discount?:{ mode:'percent'|'amount', value:number }`
- `notes?:string`

**Payment**
- `id`, `order_id`, `method:'cash'|'card'|'wallet'|'online'|'coupon'`, `amount:number`, `currency:'EGP'|...`, `meta?`
- يدعم **تقسيم الفاتورة (Split)**: `split_id?`, `guest_name?`

### 3.6 الموظفون والورديات
**Employee**: `id`, `full_name`, `pin`, `roles:string[]`

**Shift**: `id`, `cashier:EmployeeRef`, `opened_at`, `closed_at?`, `opening_float:number`, `closing_total?:number`, `notes?`

---

## 4) خريطة المناطق (Regions) + الميزانيات

- `pos-header` — 8ms
- `menu-panel` — 12ms (شبكة عناصر + بحث)
- `order-panel` — 12ms (خطوط + إجماليات)
- `footer-bar` — 6ms (أزرار ثابتة)
- `modals-root` — 8ms (Modal/Sheet)
- `toasts-root` — 4ms

كل أوامر الأحداث تحدّث الحقيقة ضمن `truth.batch()` وتعلّم أصغر Region فقط.

---

## 5) قائمة المكوّنات الرسمية (Comp.*)

### 5.1 القشرة والهيكل
- **Comp.AppShell**: يغلّف التخطيط العام ويحقن Regions.
- **Comp.TopBar**: شعار + تبديل لغة/ثيم + حالة الورديّة.
- **Comp.FooterActionBar**: مثبت أسفل الشاشة؛ أزرار: Save, Park/Resume, Print, Settle.

### 5.2 حوارات وألواح
- **Comp.Modal**: زر إغلاق، ESC، ضغط خارج، focus-trap، أحجام sm/md/lg/xl.
- **Comp.Sheet**: Drawer جانبي/سفلي للسياقات العميقة (Modifiers/Payments/Reports).
- **Comp.Toast**: رسائل عابرة.
- **Comp.PermissionPinPrompt**: تفويض أمني سريع.

### 5.3 البحث والقائمة
- **Comp.SearchBar**: حقل + كبسولات تصنيفات.
- **Comp.MenuGrid** + **Comp.MenuCard**: شبكة أصناف؛ ضغطة تضيف للطلب.

### 5.4 الطلب
- **Comp.OrderHeader**: نوع الطلب + زر الطاولات/العميل.
- **Comp.OrderLinesList** + **Comp.OrderLineRow**: صف سطر مع **QtyBadge** و **LineQuickActions**.
- **Comp.LineQuickActions**: شريط سريع: Return, Notes, Removals, Add-ons, Discount, Override.
- **Comp.Totals**: حساب نهائي.

### 5.5 المدخلات والملاحظات
- **Comp.NumpadInteger** / **Comp.NumpadDecimal**.
- **Comp.NotesSheet**: ملاحظات السطر/الطلب.

### 5.6 المُعدِّلات (على نمط ماكدونالدز)
- **Comp.ModifiersSheet**: مجموعات (addon/removal/sub/size) مع قواعد min/max، وتسعير فوري.
- **Comp.ModifierGroup** / **Comp.ModifierItem**.

### 5.7 الطاولات والحجز
- **Comp.TablesModule**:
  - **TableMap** (حالة فورية، دمج/فصل، نقل طلب)،
  - **TableList** (بحث/فرز/سعة)،
  - **TableDetails** (Guests، Orders على الطاولة، Reservations عليها، Lock/Unlock).

### 5.8 الدفع والتقسيم
- **Comp.PaymentsSheet**: وسائل متعددة (نقد/بطاقة/محفظة/أونلاين/قسيمة)، متبقي، توزيع.
- **Comp.PaymentMethodButton**، **Comp.SplitBillSheet**.

### 5.9 التقارير والطباعة
- **Comp.ReportsPanel**: فلترة حسب الحالة/النوع/الورديّة/الموظف؛ سحب من IndexedDB.
- **Comp.PrintPreviewSheet**: معاينة مطبوعة حرارية 58/80mm.

---

## 6) المواصفات التفصيلية للمكوّنات الحرجة (أولويات التنفيذ)

> نلتزم ببناء **3 مكوّنات في كل دفعة** بتشطيب كامل.

### A) Comp.Modal
- **Props**: `{open, title, size, closeOnOutside=true, closeOnEsc=true, content}`
- **A11y**: `role=dialog`, `aria-modal`, `aria-labelledby`, focus-trap.
- **أوامر**: `closeModal`, `modalKeyDown` (ESC).
- **Regions**: `modals-root` (8ms).

### B) Comp.NumpadInteger
- **Props**: `{value, min=1, max, title}`
- **مفاتيح**: 7–9, 4–6, 1–3, C, 0, ⌫, Confirm.
- **أوامر**: `numKey`, `numSync`, `numConfirm` → تعدّل `qty` ثم `truth.mark('order-panel')`.

### C) Comp.LineQuickActions
- **أزرار**: Return, Notes, Removals, Add‑ons, Discount, Override.
- **أوامر**: `openReturn`, `openNotes`, `openRemovals`, `openAddons`, `openLineDiscount`, `openPriceOverride`.

### D) Comp.ModifiersSheet
- **قواعد**: selection single/multi, min/max، حساب `modDelta`، منع تجاوز القيود.
- **حفظ**: يطبّق `mods` على السطر ويحدث `modDelta` ويتبعها `computeTotals()`.

### E) Comp.TablesModule
- **قدرات**:
  - ربط **عدة طاولات** على **طلب واحد**،
  - ربط **عدة طلبات** على **طاولة واحدة**،
  - **حجوزات** مستقلة تقفل الطاولات بزمن،
  - **Guests**: تتبّع سعة المقاعد المتاحة والمتبقية.
- **أوامر**: `selectTable`, `mergeTables`, `splitTable`, `moveOrderToTable`, `setGuests`, `createReservation`, `editReservation`, `cancelReservation`, `lockTable`, `unlockTable`.

### F) Comp.PaymentsSheet
- **وسائل**: `cash|card|wallet|online|coupon` + مزيج في نفس الطلب.
- **التقسيم**: byItems/byGuests/byAmount مع `split_id`.
- **أوامر**: `addPayment`, `editPayment`, `removePayment`, `finalize` (تنتقل الحالة إلى `paid` + طباعة).

### G) Comp.ReportsPanel
- **مصدر**: IndexedDB `orders`.
- **حالات**: `new → in_preparation → prepared → delivered → paid`.
- **فلترة**: حسب `status`, `type`, `shift_id`, `cashier`, `date_range`.
- **عرض**: النوع، رقم الطاولة، العميل/الهاتف/العنوان، حالة الطلب، الوردية، الكاشير.
- **أوامر**: `showReports`, `filterOrders`, `refreshReports`, `openOrderFromReport`.

---

## 7) التدفقات (Flows)

### 7.1 إضافة صنف مع مُعدِّلات
1. `addToOrder(itemId)` → إنشاء `OrderLine` بالقيم الافتراضية.
2. إن وُجد `modifiers_profile_id` للصنف، فتح **ModifiersSheet**.
3. عند الحفظ: حساب `modDelta` وتحديث الإجماليات.

### 7.2 الكمية السريعة
- الضغط على شارة الكمية يفتح **NumpadInteger**، تأكيد → تحديث السطر وإجماليات الطلب.

### 7.3 شريط إجراءات السطر
- زر ⋯ يطوي/يفتح الشريط: Return/Notes/Removals/Add‑ons/Discount/Override.

### 7.4 الطاولات والحجز
- اختيار/دمج/فصل الطاولات؛ نقل طلب لطاولة أخرى.
- إنشاء حجز: يقفل الطاولات (status=locked) ضمن الفترة، مع تحقق السعة.
- استعراض الطلبات أو الحجوزات للطاولة من **TableDetails** مع أزرار الإدارة.

### 7.5 حالات الطلب (Lifecycle)
`new → in_preparation → prepared → delivered → paid` مع شارة زمنية لكل انتقال.

### 7.6 الدفع والتقسيم
- توزيع مبالغ على عدة وسائل. المتبقي = total − ∑payments.
- التقسيم على ضيوف/عناصر/مبلغ، وطباعة لكل Split عند التحصيل.

### 7.7 الطباعة الحرارية (58/80mm)
- **قوالب**: Kitchen Ticket, Customer Receipt.
- **بنية السطر**:
  - `• Big Mac`
  - `  + Extra Cheese x2  +7.00`
  - `  − No Onion`
- **معايير**: عرض ثابت أحرف، لفّ تلقائي، محاذاة إجماليات يمين، دعم لغتين واتجاهين. ترويسة/تذييل حسب الإعدادات.

---

## 8) التخزين والمزامنة

- **IndexedDB** جداول: `orders`, `order_lines`, `payments`, `shifts`, `tables`, `reservations`, `customers`, `drivers`.
- **WebSocket** أحداث: `order.created`, `order.updated`, `kds.ticket`, `delivery.assign`, `shift.opened/closed`.
- **مزامنة**: Upload عند إغلاق الوردية، أو تدريجيًا في الخلفية إذا متاح.

---

## 9) الوصولية ولوحة المفاتيح (A11y/Hotkeys)

- Modal: ESC للإغلاق؛ Trap للفوكس؛ أزرار تأكيد/إلغاء قابلة للوصول.
- اختصارات:
  - `F1` مساعدة، `F2` تبديل اللغة، `F3` بحث،
  - `Alt+Q` فتح Numpad، `Alt+P` طباعة، `Alt+S` تحصيل.

---

## 10) معايير الأداء والاختبار

- كل Region بميزانية زمنية مذكورة.
- اختبار تحميل: 1000 صنف، 100 طاولة، 500 طلب محفوظ.
- سيناريوهات اختبار:
  - إضافة صنف + Modifiers + Return،
  - طلب صالة على 3 طاولات،
  - طاولة واحدة مع 3 فواتير (split)،
  - حجز يقفل طاولتين ثم تحريره،
  - دفع مختلط (كاش+بطاقة)،
  - تقرير يفلتر `in_preparation`،
  - طباعة Kitchen/Customer في عربي/إنجليزي.

---

## 11) القواميس (i18n) — مفاتيح أساسية

```
ui: {
  shift, active, inactive, dark, light, search, dine_in, takeaway, delivery,
  select, table, customer, guest, subtotal, service, delivery_fee, vat, total,
  save_order, print, settle_pay_print, no_items, discount, confirm, cancel,
  return, notes, removals, addons, override_price, close, qty,
  reports, status, type, cashier, shift_no, prepared, delivered, paid,
}
```

---

## 12) خطة التنفيذ (دفعات 3 مكوّنات)

- **الدفعة 1 (منجَزة):** Modal, NumpadInteger, LineQuickActions.
- **الدفعة 2:** ModifiersSheet, NotesSheet, ReturnItemSheet.
- **الدفعة 3:** TablesModule (Map/List/Details).
- **الدفعة 4:** PaymentsSheet, SplitBillSheet, PrintPreviewSheet.
- **الدفعة 5:** ReportsPanel + تكامل IndexedDB/WebSocket.
- **الدفعة 6:** FooterActionBar, TopBar المتقدّم (Shift/Reports/Close Shift).

---

## 13) معايير القبول (Acceptance Criteria)

- 100% عرض الشاشة؛ الأزرار واللوحات وفق قياسات اللمس.
- تبديل لغة/اتجاه/ثيم فوري.
- تدفق حالات الطلب كامل حتى **paid**، مع طباعة Kitchen/Customer.
- الطاولات: متعدد ↔ متعدد بين الطلبات والطاولات، وحجوزات بقفل زمني وسعة دقيقة.
- المُعدِّلات: تسعير دقيق يظهر في الإجماليات والطباعة وKDS.
- التقارير: فلترة حيّة، عرض الوردية والكاشير، فتح الطلب من التقرير.
- الأداء ضمن الميزانيات، وعدم وجود Rebuild شامل إلا لضرورة.

---

يجب أن يكون لديك ثلاث ملفات قم بمحاولة الاستفادة من ملف  mishkah-v5.js يجب عليك قبل البدأ بمكونات المطعم ان تنظر في مكونات مكتبة مشكاة و أن تقلها بكل المكونات العامة التي يمكن اعادة استخدامها في أي web app قادم لا تضع في pos-comp.js أي مكونات عامة فقط المكونات المتخصصة و حاول أن تكون المكونات المتخصصة ليست مبنية على html أو حاول أن تكون كلها مبني على Comp أخرى من المكتبة لا تلجأ إلى Atoms إلا في أديق الحدود الفكرة الأن أننا نريد أن ننظر في مكونات المكتبة الموجودة و نطورها لتكون جيدة و معيارية و احترافية و نعيد استخدامها لو أن أي مكون موجود وضعيف يمكننا دعمه و تطويه و إن كان قوي فلنستخدمه و إن لم يكن موجود فلننشأه عليك بمراجعة مكونات المكتبة أولا قبل البدأ في مكوانات المطع و لنتخيل و نحلل ما هي المكونات التي تنقصنا لنبني عليها pos ثم نبنيها أولا هذا سيجعل الكود أصغر بكثير و اكثر احترافية في pos-comp.js حاول الالتزام بمعايير DSL
pos.html pos-comp.js pos.js  فلتكتب لي قائمة المكونات الصغيرة التي سنركب منها المكونات المتخصصة و كل مكون عام يمكننا استخدامه في أweb app
=
---
# 📦 Mishkah v5 — General Component Catalog

> هدف الوثيقة: تحديد **المكوّنات العامة الصغيرة** (Atoms/Molecules/Utilities) القابلة لإعادة الاستخدام في **كل تطبيق ويب** مبني على Mishkah v5، لتكون الأساس الذي تُركَّب منه المكوّنات المتخصصة (مثل POS).

---

## 0) اتفاقيات عامة

- **المساحة الاسمية**: `Mishkah.Comp`
  - `Comp.mole.*` للمكوّنات الصغيرة (زر، حقل، كبسولة…)
  - `Comp.tissue.*` للمركّبة (Card، List، Modal، Form Row…)
- **الدوال المساعدة**: كل مكوّن يقبل `tw`، ويدعم RTL/Dark تلقائيًا عبر twcss.
- **المعلمات المشتركة** (`props` القياسية حيث ينطبق):
  - `size: 'xs|sm|md|lg'`، `variant: 'solid|soft|outline|ghost|link'`
  - `intent: 'neutral|primary|success|warning|danger'`
  - `iconLeft`, `iconRight` (Unicode/SVG)
  - `loading`, `disabled`, `hotkey?: string`, `aria?: Record<string,string>`
- **الأحداث**: تفويض عبر `data-on*` فقط. أمثلة: `data-onclick="cmd"`, `data-oninput="cmd"`.
- **إمكانية الوصول**: كل عنصر تفاعلي يراعي focus، roles، وأسماء ARIA المناسبة.
- **الأداء**: ميزانية زمنية لكل Region؛ القوائم الثقيلة تدعم virtualization.

---

## 1) أساسيات تفاعلية (Atoms)

### 1.1 Buttons
- **Comp.mole.Button**: زر عام بكل المتغيرات المذكورة أعلاه.
- **Comp.mole.IconButton**: زر أيقونة دائرية/مربعة مع Tooltip.
- **Comp.mole.Segmented**: مجموعة أزرار متبادلة (Tabs خفيفة).

### 1.2 Inputs
- **Comp.mole.Input**: نصي أحادي السطر مع `prefix/suffix`, `clearable`.
- **Comp.mole.NumberInput**: أرقام صحيحة/عشرية مع قيود `min|max|step`.
- **Comp.mole.MoneyInput**: يغلّف NumberInput مع تنسيق العملة.
- **Comp.mole.PasswordInput**: إظهار/إخفاء.
- **Comp.mole.Textarea**: ملاحظات متعددة الأسطر.
- **Comp.mole.Switch**: تشغيل/إيقاف.
- **Comp.mole.Checkbox**, **Comp.mole.Radio**.

### 1.3 Picks & Selects
- **Comp.mole.SelectBase**: قائمة منسدلة أساسية.
- **Comp.mole.AsyncSelect**: جلب بيانات ديناميكي.
- **Comp.mole.MultiSelect**: اختيار متعدد بكبسولات.
- **Comp.mole.TagInput**: إدخال وسوم.
- **Comp.mole.DatePicker**، **Comp.mole.DateRange**.
- **Comp.mole.TimeInput**: وقت (ساعة/دقيقة) مع مفاتيح سريعة.
- **Comp.mole.PhoneInput**، **Comp.mole.EmailInput**.

### 1.4 Display micro
- **Comp.mole.Badge**، **Comp.mole.Chip**، **Comp.mole.Pill**.
- **Comp.mole.Avatar** (حرف/صورة)، **Comp.mole.Kbd** (اختصارات).
- **Comp.mole.Icon** (Unicode/SVG)، **Comp.mole.Spinner**, **Comp.mole.Skeleton**.
- **Comp.mole.Progress**، **Comp.mole.Meter**.

---

## 2) أسطح وتخطيطات (Molecules)

### 2.1 Surfaces
- **Comp.tissue.Card**: عنوان/محتوى/أقدام، متغيرات intent.
- **Comp.tissue.Panel**: حاوية محايدة بأطراف قابلة للتخصيص.
- **Comp.tissue.Toolbar**: شريط أدوات أفقي، يدعم الالتفاف Responsive.
- **Comp.tissue.FormRow**: تسمية + حقل + ملاحظة/خطأ.

### 2.2 Layout
- **Comp.tissue.Stack** (عمودي/أفقي)، **Comp.tissue.Grid** (12 عمودًا)، **Comp.tissue.SplitterH**.
- **Comp.tissue.ScrollArea**: تمرير داخل لوحة مع ظلال حواف.
- **Comp.tissue.Container**: أقصى عرض + حواف داخلية.

### 2.3 Navigation
- **Comp.tissue.Tabs**: علامات تبويب (line/contained/pill).
- **Comp.tissue.Breadcrumbs**.
- **Comp.tissue.Steps**: خطوات عملية.
- **Comp.tissue.NavMenu**: قائمة تنقل جانبية/عليا.
- **Comp.tissue.CommandPalette**: بحث الأوامر مع اختصارات.

### 2.4 Overlays
- **Comp.tissue.Modal**: حوار قياسي (زر إغلاق، ESC، ضغط خارج، focus-trap، أحجام).
- **Comp.tissue.Sheet**: Drawer من الحافة (start|end|bottom|top).
- **Comp.tissue.Popover**، **Comp.tissue.Tooltip**، **Comp.tissue.ContextMenu**.
- **Comp.tissue.Portal**: جذر نقل DOM للألواح/الحوارات.

### 2.5 Data Display
- **Comp.tissue.List**: قائمة بسيطة/افتراضية (virtualized) مع ItemTemplate.
- **Comp.tissue.DataTable**: جدول مع فرز/بحث/ترقيم.
- **Comp.tissue.DataTablePro**: أعمدة قابلة للتخصيص، خلايا قوالب، اختيار متعدد.
- **Comp.tissue.Stat**: بطاقات إحصاءات صغيرة.
- **Comp.tissue.EmptyState**: حالة لا بيانات.

### 2.6 Feedback
- **Comp.tissue.Toast**: رسائل عابرة (Success/Warning/Error/Info).
- **Comp.tissue.Alert**: تنبيه ثابت داخل المحتوى.
- **Comp.tissue.ConfirmDialog**: حوار تأكيد قياسي.

---

## 3) أدوات (Utilities)

- **Comp.util.Hotkeys**: ربط اختصارات عالمية وإظهار `?` للمساعدة.
- **Comp.util.FocusTrap**: حصر تركيز داخل Overlay.
- **Comp.util.VisuallyHidden**: نص مخفي للوصولية.
- **Comp.util.PortalRoot**: تركيب جذور Overlays في نهاية الوثيقة.
- **Comp.util.Form**: ربط حقول بنمط موحّد + التحقق + رسائل.
- **Comp.util.Currency**: تنسيق عملات حسب locale، قناع إدخال.
- **Comp.util.Phone**: تنسيق دولي (قناع + تحقق).

---

## 4) خريطة استخدام في POS (أمثلة تركيب)

- **OrderHeader** (متخصص) = Toolbar + Segmented + Button/IconButton + Popover.
- **OrderLineRow** = Card(Row) + Badge + IconButton + Segmented + Popover.
- **NumpadInteger** = Panel + Grid + Button/IconButton + Kbd.
- **ModifiersSheet** = Sheet + Tabs + List + Chip/Badge + ConfirmDialog.
- **TablesModule** = Panel + Tabs + Grid + Card + Popover + ConfirmDialog + DataTablePro.
- **PaymentsSheet** = Sheet + FormRow + MoneyInput + Segmented + DataTable + Toast.
- **ReportsPanel** = Toolbar + AsyncSelect + DateRange + DataTablePro + CommandPalette.

---

## 5) الحالة الحالية والفراغات المقترحة

- موجودة: Button, Input, SelectBase, Spinner, Skeleton, NumberInput, PasswordInput, TagInput, AsyncSelect, MultiSelect, DatePicker, DateRange, ContextMenu, SplitterH, EmptyState, PageHeader, NavMenu, DataTable, DataTablePro, CommandPalette, ReportTool.
- **نقترح إضافة/تعزيز**:
  - Molecules: Modal, Sheet, Popover, Tooltip, ConfirmDialog, FormRow, Panel, Card, ScrollArea, Tabs, Steps, Portal.
  - Atoms: MoneyInput, PhoneInput, TimeInput, Textarea, Switch, Checkbox, Radio, Badge/Chip/Pill, Progress/Meter, Avatar, Kbd.
  - Utilities: FocusTrap, PortalRoot, Currency/Phone utils، Hotkeys.

---

## 6) معايير الاندماج في DSL

- كل مكوّن يعرِّف **props واضحة** + **Slots** (`default`, `header`, `footer`…) مع دعم `tw`.
- الأحداث تُعلن كأسماء أوامر جاهزة للاستخدام (`data-onclick="…"`).
- المكوّنات المتخصصة (POS) تُبنى **فوق** هذه المكوّنات فقط، ولا تستخدم Atoms مباشرة إلا للضرورة القصوى.

---

## 7) أولويات التنفيذ (3 مكوّنات/دفعة)

1) **Modal**, **Sheet**, **ConfirmDialog**  → لتثبيت معايير Overlays.
2) **FormRow**, **MoneyInput**, **PhoneInput** → جودة إدخال البيانات.
3) **Tabs**, **Popover**, **Tooltip** → تحكّم وسياق غني.
4) **Card**, **Panel**, **ScrollArea** → أسطح نظيفة.
5) **Toast**, **Steps**, **Progress** → تغذية راجعة واضحة.
6) **Portal**, **FocusTrap**, **Hotkeys** → بنية تحتية صلبة.

---

## 8) معايير القبول العامة للمكوّنات

- دعم كامل RTL/Dark و i18n.
- A11y: roles/aria/labels/tabIndex + مفاتيح ESC/Enter/Space حيث يلزم.
- أداء: لا تتجاوز الميزانية في المناطق الساخنة، ودعم virtualization حيث المنطقي.
- API ثابتة: `size/variant/intent` موحّدة على المكوّنات.
- Slots مرنة: `header|default|footer|actions`.

---

**ملاحظة تنفيذية**: بعد تثبيت هذه الحزمة العامة في `mishkah-v5.js` (أو ملف `mishkah-comp-core.js`)، نلتزم في `pos-comp.js` ببناء مكوّنات المطعم المتخصصة حصريًا فوقها لضمان صغر الكود واتساق التجربة عبر كل المشاريع.

