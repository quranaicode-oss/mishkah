<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover" />
    <meta name="description" content="Interactive entity-relationship diagram or data model diagram implemented by GoJS in JavaScript for HTML." />
    <!-- Copyright 1998-2021 by Northwoods Software Corporation. -->
    <title>Entity Relationship</title>
    @jquaryx
    @masjson1
    <script src="../../UploadFiles/web/412FA232-F654-42A1-BFD8-55B494F27087/Entity_Relationship_Diagram_ERD/js/go.js"></script>

    <script src="../../UploadFiles/web/412FA232-F654-42A1-BFD8-55B494F27087/Entity_Relationship_Diagram_ERD/js/Figures.js"></script>

</head>

<body>
    <!-- This top nav is not part of the sample code -->

    <div class="md:flex flex-col md:flex-row md:min-h-screen w-full max-w-screen-xl mx-auto">
        <!-- * * * * * * * * * * * * * -->
        <!-- Start of GoJS sample code -->

        <div class="p-4 w-full">
            <script id="code">
                function init() {
                    var $ = go.GraphObject.make;  // for conciseness in defining templates

                    myDiagram =
                        $(go.Diagram, "myDiagramDiv",  // must name or refer to the DIV HTML element
                            {
                                allowDelete: false,
                                allowCopy: false,
                                layout: $(go.ForceDirectedLayout),
                                "undoManager.isEnabled": true
                            });

                    var colors = {
                        'red': '#be4b15',
                        'green': '#52ce60',
                        'blue': '#6ea5f8',
                        'lightred': '#fd8852',
                        'lightblue': '#afd4fe',
                        'lightgreen': '#b9e986',
                        'pink': '#faadc1',
                        'purple': '#d689ff',
                        'orange': '#fdb400',
                    }

                    // the template for each attribute in a node's array of item data
                    var itemTempl =
                        $(go.Panel, "Horizontal",
                            $(go.Shape,
                                { desiredSize: new go.Size(15, 15), strokeJoin: "round", strokeWidth: 3, stroke: null, margin: 2 },
                                new go.Binding("figure", "figure"),
                                new go.Binding("fill", "color"),
                                new go.Binding("stroke", "color")),
                            $(go.TextBlock,
                                {
                                    stroke: "#333333",
                                    font: "bold 14px sans-serif"
                                },
                                new go.Binding("text", "name"))
                        );

                    // define the Node template, representing an entity
                    myDiagram.nodeTemplate =
                        $(go.Node, "Auto",  // the whole node panel
                            {
                                selectionAdorned: true,
                                resizable: true,
                                layoutConditions: go.Part.LayoutStandard & ~go.Part.LayoutNodeSized,
                                fromSpot: go.Spot.AllSides,
                                toSpot: go.Spot.AllSides,
                                isShadowed: true,
                                shadowOffset: new go.Point(3, 3),
                                shadowColor: "#C5C1AA"
                            },
                            new go.Binding("location", "location").makeTwoWay(),
                            // whenever the PanelExpanderButton changes the visible property of the "LIST" panel,
                            // clear out any desiredSize set by the ResizingTool.
                            new go.Binding("desiredSize", "visible", function (v) { return new go.Size(NaN, NaN); }).ofObject("LIST"),
                            // define the node's outer shape, which will surround the Table
                            $(go.Shape, "RoundedRectangle",
                                { fill: 'white', stroke: "#eeeeee", strokeWidth: 3 }),
                            $(go.Panel, "Table",
                                { margin: 8, stretch: go.GraphObject.Fill },
                                $(go.RowColumnDefinition, { row: 0, sizing: go.RowColumnDefinition.None }),
                                // the table header
                                $(go.TextBlock,
                                    {
                                        row: 0, alignment: go.Spot.Center,
                                        margin: new go.Margin(0, 24, 0, 2),  // leave room for Button
                                        font: "bold 16px sans-serif"
                                    },
                                    new go.Binding("text", "key")),
                                // the collapse/expand button
                                $("PanelExpanderButton", "LIST",  // the name of the element whose visibility this button toggles
                                    { row: 0, alignment: go.Spot.TopRight }),
                                // the list of Panels, each showing an attribute
                                $(go.Panel, "Vertical",
                                    {
                                        name: "LIST",
                                        row: 1,
                                        padding: 3,
                                        alignment: go.Spot.TopLeft,
                                        defaultAlignment: go.Spot.Left,
                                        stretch: go.GraphObject.Horizontal,
                                        itemTemplate: itemTempl
                                    },
                                    new go.Binding("itemArray", "items"))
                            )  // end Table Panel
                        );  // end Node

                    // define the Link template, representing a relationship
                    myDiagram.linkTemplate =
                        $(go.Link,  // the whole link panel
                            {
                                selectionAdorned: true,
                                layerName: "Foreground",
                                reshapable: true,
                                routing: go.Link.AvoidsNodes,
                                corner: 5,
                                curve: go.Link.JumpOver
                            },
                            $(go.Shape,  // the link shape
                                { stroke: "#303B45", strokeWidth: 2.5 }),
                            $(go.TextBlock,  // the "from" label
                                {
                                    textAlign: "center",
                                    font: "bold 14px sans-serif",
                                    stroke: "#1967B3",
                                    segmentIndex: 0,
                                    segmentOffset: new go.Point(NaN, NaN),
                                    segmentOrientation: go.Link.OrientUpright
                                },
                                new go.Binding("text", "text")),
                            $(go.TextBlock,  // the "to" label
                                {
                                    textAlign: "center",
                                    font: "bold 14px sans-serif",
                                    stroke: "#1967B3",
                                    segmentIndex: -1,
                                    segmentOffset: new go.Point(NaN, NaN),
                                    segmentOrientation: go.Link.OrientUpright
                                },
                                new go.Binding("text", "toText"))
                        );
                 
                
                    loading('ERD_data_load');
                    get_xmlr("../../r/Json", { tb: "ERD_data", cond: "('" + getpar('objname') + "','" + getpar('typ') +"')" }, function (data)
                    {
                        try {
                            console.log(data);
                            var linkDataArray = data[0].ERD[0].linkDataArray;
                            var nodeDataArray = data[0].ERD[0].nodeDataArray;
                            console.log(nodeDataArray);
                            console.log(linkDataArray);
                            myDiagram.model = $(go.GraphLinksModel,
                                {
                                    copiesArrays: true,
                                    copiesArrayObjects: true,
                                    nodeDataArray: nodeDataArray,
                                    linkDataArray: linkDataArray
                                });
                        } catch (err)
                        {


                        }
                       

                        unloading('ERD_data_load');
                    });


                    

                  
                 
                }
                window.addEventListener('DOMContentLoaded', init);
            </script>

            <div id="sample">
                <div id="myDiagramDiv" style="background-color: white; border: solid 1px black; width: 100%; height: 1000px;overflow:auto"></div>
            </div>
        </div>
        <!-- * * * * * * * * * * * * * -->
        <!--  End of GoJS sample code  -->
    </div>
</body>

</html>
