@using System
@using System.Collections.Generic
@using System.Data
@using System.IO
@using System.Linq
@using System.Web
@using System.Text.Json
@using Newtonsoft.Json
@using DocumentFormat.OpenXml
@using DocumentFormat.OpenXml.Packaging
@using DocumentFormat.OpenXml.Wordprocessing
@using Mas.com.eg.Models


@functions {


    public static Newtonsoft.Json.Linq.JObject ConvertElementToJson(OpenXmlElement element)
    {
        if (element == null)
        {
            return null;
        }

        var jsonObj = new Newtonsoft.Json.Linq.JObject();
        jsonObj["ElementType"] = element.GetType().Name;

        var attributes = new Newtonsoft.Json.Linq.JObject();
        foreach (var attr in element.GetAttributes())
        {
            attributes[attr.LocalName] = attr.Value;
        }

        if (attributes.HasValues)
        {
            jsonObj["Attributes"] = attributes;
        }

        if (!element.HasChildren && !string.IsNullOrEmpty(element.InnerText))
        {
            jsonObj["InnerText"] = element.InnerText;
        }

        if (element.HasChildren)
        {
            var childrenArray = new Newtonsoft.Json.Linq.JArray();
            foreach (var child in element.ChildElements)
            {
                childrenArray.Add(ConvertElementToJson(child));
            }
            jsonObj["Children"] = childrenArray;
        }

        return jsonObj;
    }
    public class DocxToJsonConverter2
    {
        public class NewDoc
        {
            public bool success { get; set; }
            public string message { get; set; }
            public byte[] fileBytes { get; set; }
        }

        public class JsonTableCell
        {
            public string Content { get; set; }
            public int GridSpan { get; set; } = 1;
            public string VerticalMerge { get; set; }
            public List<FormattedRun> FormattedRuns { get; set; }
            public Dictionary<string, string> Borders { get; set; }
            public int? rowSpan { get; set; }
            public string Direction { get; set; }  // "LTR" or "RTL"
            public string Alignment { get; set; }  // "left", "center", etc.
            public List<JsonCheckbox> Checkboxes { get; set; } // New property for checkboxes
        }

        public class JsonCheckbox
        {
            public bool IsChecked { get; set; }
            public string Content { get; set; } // The text associated with the checkbox, if any
                                                // You might add more properties like ID, Name, etc. if relevant
        }

        public class JsonTableElement
        {
            public int ID { get; set; }
            public string Type { get; set; }
            public List<JsonTableRow> Content { get; set; }
            public Dictionary<string, string> Borders { get; set; }
        }
        public class JsonTableRow
        {
            public List<JsonTableCell> Cells { get; set; }
            public Dictionary<string, string> Borders { get; set; }
        }

        public class FormattedRun
        {
            public string Text { get; set; }
            public bool Bold { get; set; }
            public bool Italic { get; set; }
            public string Color { get; set; }
            public string FontSize { get; set; }
            public string FontName { get; set; }
            public bool Underline { get; set; }
            public string Alignment { get; set; }
            public string Background { get; set; }
        }
        public static object ConvertDocxToJson(string filePath)
        {
            if (string.IsNullOrEmpty(filePath))
            {
                return new { success = false, message = "مسار الملف غير صالح." };
            }

            if (filePath.Contains(".."))
            {
                return new { success = false, message = "مسار الملف غير صالح." };
            }

            string docsDirectory = HttpRuntime.AppDomainAppPath;
            string absolutePath = Path.Combine(docsDirectory, filePath.Replace('/', '\\'));

            if (!absolutePath.StartsWith(docsDirectory, StringComparison.InvariantCultureIgnoreCase))
            {
                return new { success = false, message = "مسار الملف غير مسموح به." };
            }

            if (!System.IO.File.Exists(absolutePath))
            {
                return new { success = false, message = "لم يتم العثور على الملف." + absolutePath };
            }

            var documentElements = new List<object>();
            int elementId = 0;
            string defualtdocumentDirection = "LTR"; // Default direction
            string documentDirection = ""; // Default direction
            using (WordprocessingDocument wordDoc = WordprocessingDocument.Open(absolutePath, false))
            {
                var body = wordDoc.MainDocumentPart.Document.Body;
                // Get default tab stop width from document settings (in twentieths of a point)
                int defaultTabWidthTwips = 720; // Default fallback: 0.5 inches (720 twips)
                var settingsPart = wordDoc.MainDocumentPart.DocumentSettingsPart?.Settings;
                if (settingsPart != null)
                {
                    var defaultTabStop = settingsPart.Elements<DefaultTabStop>().FirstOrDefault();
                    if (defaultTabStop != null && defaultTabStop.Val != null)
                    {
                        defaultTabWidthTwips = defaultTabStop.Val.Value;
                    }
                }
                var stylesPart = wordDoc.MainDocumentPart.StyleDefinitionsPart;
                if (stylesPart != null)
                {
                    var styles = stylesPart.Styles;
                    if (styles != null)
                    {
                        var docDefaults = styles.Elements<DocDefaults>().FirstOrDefault();
                        if (docDefaults != null)
                        {
                            var pPrDefault = docDefaults.GetFirstChild<ParagraphPropertiesDefault>();
                            var pPr = pPrDefault?.GetFirstChild<ParagraphProperties>();
                            if (pPr?.BiDi != null && pPr.BiDi.Val != null && pPr.BiDi.Val.Value)
                            {
                                documentDirection = "RTL";
                            }
                        }
                    }
                }

                // Step 3: If direction is still LTR, check for RTL languages in run properties
                if (documentDirection == "LTR")
                {
                    var runPropertiesDefault = stylesPart?.Styles?.Elements<DocDefaults>().FirstOrDefault()
                        ?.GetFirstChild<RunPropertiesDefault>();
                    var lang = runPropertiesDefault?.GetFirstChild<RunProperties>()?.GetFirstChild<Languages>();
                    if (lang != null && lang.Val != null)
                    {
                        string language = lang.Val.Value?.ToLower();
                        // Common RTL languages: Arabic (ar), Hebrew (he), Persian (fa), Urdu (ur)
                        if (language != null && (language.StartsWith("ar") || language.StartsWith("he") ||
                                                language.StartsWith("fa") || language.StartsWith("ur")))
                        {
                            documentDirection = "RTL";
                        }
                    }
                }

                // Step 4: If still LTR, check paragraphs in the document body for BiDi
                if (documentDirection == "LTR")
                {
                    if (body != null)
                    {
                        var paragraphs = body.Elements<Paragraph>();
                        foreach (var para in paragraphs)
                        {
                            var pPr = para.GetFirstChild<ParagraphProperties>();
                            if (pPr?.BiDi != null && pPr.BiDi.Val != null && pPr.BiDi.Val.Value)
                            {
                                documentDirection = "RTL";
                                break;
                            }
                        }
                    }
                }
                // Convert twips to approximate number of spaces (assuming 1 space ≈ 120 twips, ~12pt font)
                int spacesPerTab = defaultTabWidthTwips / 120; // Adjust divisor based on font size if needed
                string tabAsSpaces = new string(' ', spacesPerTab > 0 ? spacesPerTab : 20); // Fallback to 4 spaces if zero
                foreach (var element in body.Elements())
                {
                    elementId++;

                    if (element is Paragraph para)
                    {
                        var paragraphFormat = new Dictionary<string, object>();
                        var runs = para.Elements<Run>();
                        var runContents = new List<object>();
                        //  استخراج خصائص الفقرة (Alignment + Background)
                        var paragraphProps = para.ParagraphProperties;
                        if (paragraphProps != null)
                        {
                            var alignment = paragraphProps.Justification?.Val?.ToString();
                            if (alignment != null)
                                paragraphFormat["Alignment"] = alignment;

                            var shd = paragraphProps.Shading;
                            if (shd?.Fill != null)
                                paragraphFormat["Shading"] = shd.Fill.Value;
                            //  Direction: BiDi means RTL
                            var bidi = paragraphProps.BiDi;
                            paragraphFormat["Direction"] = bidi != null ? "RTL" : "LTR";
                        }
                        foreach (var run in runs)
                        {
                            // --- START Checkbox Handling within Paragraph Runs ---
                            var sdtRun = run.Descendants<SdtRun>().FirstOrDefault();
                            if (sdtRun != null)
                            {
                                var sdtContentCheckbox = sdtRun.SdtProperties?.GetFirstChild<DocumentFormat.OpenXml.Wordprocessing.CheckBox>();
                                if (sdtContentCheckbox != null)
                                {
                                    // CORRECTED LINE: Get the 'Checked' child element
                                    var checkedState = sdtContentCheckbox.GetFirstChild<DocumentFormat.OpenXml.Wordprocessing.Checked>();

                                    // Now access its Val property
                                    bool isChecked = checkedState?.Val?.Value ?? false; // Use null-conditional operator for safety

                                    string checkboxText = sdtRun.GetFirstChild<SdtContentRun>()?.InnerText.Trim() ?? ""; // Get any text inside the content control

                                    runContents.Add(new
                                    {
                                        Type = "Checkbox",
                                        IsChecked = isChecked,
                                        Content = checkboxText // You might want to get the specific text, not just innerText
                                    });
                                    continue; // Skip further processing for this run as it's a checkbox
                                }
                            }
                            // --- END Checkbox Handling within Paragraph Runs ---

                            var runFormatFlags = new Dictionary<string, bool>();
                            var runFormatValues = new Dictionary<string, string>();
                            // Check for tab elements in the run
                            var tabElements = run.Elements<TabChar>();
                            foreach (var tab in tabElements)
                            {
                                // Use spaces to represent the tab based on calculated width
                                runContents.Add(new { Text = tabAsSpaces, Formatting = new Dictionary<string, bool> { { "Tab", true } } });
                            }

                            var textElement = run.GetFirstChild<Text>();
                            if (textElement != null)
                            {
                                string text = textElement.Text;
                                var runProperties = run.RunProperties;
                                var formatting = new Dictionary<string, bool>();
                                var formattingValue = new Dictionary<string, string>();
                                if (runProperties != null)
                                {
                                    if (runProperties.Bold != null)
                                        runFormatFlags["Bold"] = true;

                                    if (runProperties.Italic != null)
                                        runFormatFlags["Italic"] = true;

                                    if (runProperties.Underline != null)
                                    {
                                        runFormatFlags["Underline"] = true;
                                        if (runProperties.Underline.Val != null)
                                            runFormatValues["UnderlineStyle"] = runProperties.Underline.Val.Value.ToString();
                                    }

                                    if (runProperties.Color?.Val != null)
                                    {
                                        runFormatFlags["Color"] = true;
                                        runFormatValues["ColorValue"] = runProperties.Color.Val.Value;
                                    }

                                    if (runProperties.Highlight?.Val != null)
                                    {
                                        runFormatFlags["Highlight"] = true;
                                        runFormatValues["HighlightValue"] = runProperties.Highlight.Val.Value.ToString();
                                    }

                                    if (runProperties.Shading?.Fill != null)
                                    {
                                        runFormatFlags["Shading"] = true;
                                        runFormatValues["ShadingValue"] = runProperties.Shading.Fill.Value;
                                    }

                                    if (runProperties.FontSize?.Val != null)
                                    {
                                        runFormatValues["FontSize"] = runProperties.FontSize.Val.Value;
                                    }

                                    if (runProperties.RunFonts?.Ascii != null)
                                    {
                                        runFormatValues["FontFamily"] = runProperties.RunFonts.Ascii.Value;
                                    }
                                }

                                runContents.Add(new
                                {
                                    Text = text,
                                    Formatting = runFormatFlags,
                                    FormattingValues = runFormatValues
                                });
                            }
                        }
                        documentElements.Add(new { ID = elementId, Type = "Paragraph", Content = runContents, Formatting = paragraphFormat });
                    }
                    else if (element is Table table)
                    {
                        var tableData = new List<JsonTableRow>();
                        var tableBorders = new Dictionary<string, string>();

                        var tblProps = table.GetFirstChild<TableProperties>();

                        if (tblProps != null)
                        {
                            var borders = tblProps.GetFirstChild<TableBorders>();
                            if (borders != null)
                            {
                                tableBorders["Top"] = GetBorderStyle(borders.TopBorder);
                                tableBorders["Bottom"] = GetBorderStyle(borders.BottomBorder);
                                tableBorders["Left"] = GetBorderStyle(borders.LeftBorder);
                                tableBorders["Right"] = GetBorderStyle(borders.RightBorder);
                                tableBorders["InsideH"] = GetBorderStyle(borders.InsideHorizontalBorder);
                                tableBorders["InsideV"] = GetBorderStyle(borders.InsideVerticalBorder);
                            }
                        }
                        foreach (var row in table.Elements<TableRow>())
                        {
                            var runFormatFlagsRow = new Dictionary<string, bool>();
                            var runFormatValuesRow = new Dictionary<string, string>();
                            var rowData = new List<JsonTableCell>();
                            var rowBorders = new Dictionary<string, string>();
                            var rowProps = row.GetFirstChild<TableRowProperties>();
                            if (rowProps != null)
                            {
                                var rowCellBorders = rowProps.GetFirstChild<TableCellBorders>();
                                if (rowCellBorders != null)
                                {
                                    rowBorders["Top"] = GetBorderStyle(rowCellBorders.TopBorder);
                                    rowBorders["Bottom"] = GetBorderStyle(rowCellBorders.BottomBorder);
                                    rowBorders["Left"] = GetBorderStyle(rowCellBorders.LeftBorder);
                                    rowBorders["Right"] = GetBorderStyle(rowCellBorders.RightBorder);
                                }
                            }
                            foreach (var cell in row.Elements<TableCell>())
                            {
                                var jsonCell = new JsonTableCell();
                                var formattedRuns = new List<FormattedRun>();
                                jsonCell.Checkboxes = new List<JsonCheckbox>(); // Initialize checkbox list

                                // Extract paragraph direction and alignment for the cell (from first paragraph as representative)
                                var firstParagraph = cell.Elements<Paragraph>().FirstOrDefault();
                                if (firstParagraph != null)
                                {
                                    var paraProps = firstParagraph.ParagraphProperties;

                                    if (paraProps != null)
                                    {
                                        // Direction: RTL if <w:bidi/> is present
                                        var isRtl = paraProps.BiDi != null;
                                        jsonCell.Direction = isRtl ? "RTL" : "LTR";

                                        // Alignment: left, center, right, justify
                                        var align = paraProps.Justification?.Val?.Value.ToString();
                                        if (!string.IsNullOrEmpty(align))
                                            jsonCell.Alignment = align;
                                    }
                                }
                                foreach (var paragraph in cell.Elements<Paragraph>())
                                {
                                    var paragraphAlignment = paragraph.ParagraphProperties?.Justification?.Val;
                                    foreach (var run in paragraph.Elements<Run>())
                                    {
                                        // --- START Checkbox Handling within Table Cell Runs ---
                                        var sdtRun = run.Descendants<SdtRun>().FirstOrDefault();
                                        if (sdtRun != null)
                                        {
                                            var sdtContentCheckbox = sdtRun.SdtProperties?.GetFirstChild<DocumentFormat.OpenXml.Wordprocessing.CheckBox>();
                                            if (sdtContentCheckbox != null)
                                            {
                                                // CORRECTED LINE: Get the 'Checked' child element
                                                var checkedState = sdtContentCheckbox.GetFirstChild<DocumentFormat.OpenXml.Wordprocessing.Checked>();

                                                // Now access its Val property
                                                bool isChecked = checkedState?.Val?.Value ?? false; // Use null-conditional operator for safety

                                                string checkboxText = sdtRun.GetFirstChild<SdtContentRun>()?.InnerText.Trim() ?? ""; // Get any text inside the content control

                                                jsonCell.Checkboxes.Add(new JsonCheckbox
                                                {
                                                    IsChecked = isChecked,
                                                    Content = checkboxText
                                                });
                                                continue; // Skip further processing for this run as it's a checkbox
                                            }
                                        }
                                        // --- END Checkbox Handling within Table Cell Runs ---

                                        var formattedRun = new FormattedRun
                                        {
                                            Text = run.InnerText,
                                            Bold = run.RunProperties?.Bold != null,
                                            Italic = run.RunProperties?.Italic != null,
                                            Color = run.RunProperties?.Color?.Val,
                                            FontSize = run.RunProperties?.FontSize?.Val,
                                            FontName = run.RunProperties?.RunFonts?.Ascii,
                                            Underline = run?.RunProperties?.Underline?.Val != null,
                                            Alignment = paragraphAlignment,
                                            Background = run.RunProperties?.Shading?.Fill
                                        };
                                        formattedRuns.Add(formattedRun);
                                    }
                                }

                                jsonCell.FormattedRuns = formattedRuns;

                                // Also set plain content if needed, but consider if checkboxes are part of this
                                // If you only want text, you'll need to filter out checkbox runs from InnerText
                                jsonCell.Content = string.Join("", formattedRuns.Select(fr => fr.Text));
                                // If there are checkboxes, you might want to adjust how 'Content' is set,
                                // or leave it as is if 'FormattedRuns' is the primary way to get content.

                                var cellProperties = cell.TableCellProperties;
                                if (cellProperties != null)
                                {
                                    var gridSpan = cellProperties.GridSpan;
                                    if (gridSpan != null && gridSpan.Val.HasValue)
                                    {
                                        jsonCell.GridSpan = gridSpan.Val.Value;
                                    }

                                    var vMerge = cellProperties.VerticalMerge;
                                    if (vMerge != null)
                                    {
                                        jsonCell.VerticalMerge = vMerge.Val != null && vMerge.Val == MergedCellValues.Restart ? "Restart" : "Continue";
                                    }
                                }
                                //  Borders
                                var borders = cellProperties.TableCellBorders;
                                var topBorder = borders?.TopBorder;
                                var bottomBorder = borders?.BottomBorder;
                                var leftBorder = borders?.LeftBorder;
                                var rightBorder = borders?.RightBorder;

                                jsonCell.Borders = new Dictionary<string, string>
                                {
                                    ["Top"] = GetBorderStyle(topBorder) ?? "inherit",
                                    ["Bottom"] = GetBorderStyle(bottomBorder) ?? "inherit",
                                    ["Left"] = GetBorderStyle(leftBorder) ?? "inherit",
                                    ["Right"] = GetBorderStyle(rightBorder) ?? "inherit",
                                    ["Background"] = cell.TableCellProperties?.Shading?.Fill ?? "inherit",
                                };

                                rowData.Add(jsonCell);
                            }
                            tableData.Add(new JsonTableRow
                            {
                                Cells = rowData,
                                Borders = rowBorders
                            });

                        }
                        // Option 1: Look for BiDiVisual (bidirectional layout)
                        var bidiVisual = tblProps?.GetFirstChild<BiDiVisual>();
                        if (bidiVisual != null)
                        {
                            tableBorders["Direction"] = "RTL"; // Table flows right-to-left
                        }
                        else
                        {
                            tableBorders["Direction"] = "";
                        }
                        documentElements.Add(new JsonTableElement
                        {
                            ID = elementId,
                            Type = "Table",
                            Content = tableData,
                            Borders = tableBorders
                        });

                        for (int rowIndex = 0; rowIndex < tableData.Count; rowIndex++)
                        {
                            var row = tableData[rowIndex];
                            // Access Cells from JsonTableRow — tableData is List<JsonTableRow>
                            for (int colIndex = 0; colIndex < row.Cells.Count; colIndex++)
                            {
                                var cell = row.Cells[colIndex];

                                if (cell.VerticalMerge == "Restart")
                                {
                                    int rowspan = 1;

                                    // Check cells below in same column
                                    for (int nextRow = rowIndex + 1; nextRow < tableData.Count; nextRow++)
                                    {
                                        var nextRowCells = tableData[nextRow];
                                        if (colIndex >= nextRowCells.Cells.Count)
                                            break;

                                        var belowCell = nextRowCells.Cells[colIndex];
                                        if (belowCell.VerticalMerge == "Continue")
                                        {
                                            rowspan++;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }

                                    cell.rowSpan = rowspan;
                                }
                            }
                        }

                    }
                    else if (element is Hyperlink hyperlink)
                    {
                        string displayText = hyperlink.InnerText;
                        string uri = null;
                        if (hyperlink.Id != null)
                        {
                            HyperlinkRelationship hyperlinkRel = wordDoc.MainDocumentPart.HyperlinkRelationships.FirstOrDefault(h => h.Id == hyperlink.Id);
                            if (hyperlinkRel != null)
                            {
                                uri = hyperlinkRel.Uri.ToString();
                            }
                        }
                        documentElements.Add(new { ID = elementId, Type = "Hyperlink", Content = displayText, Uri = uri });
                    }
                    else if (element is NumberingProperties)
                    {
                        documentElements.Add(new { ID = elementId, Type = "List", Content = element.InnerText });
                    }
                    else if (element.Descendants<Drawing>().Any())
                    {
                        var images = new List<object>();
                        foreach (var drawing in element.Descendants<Drawing>())
                        {
                            var blip = drawing.Descendants<DocumentFormat.OpenXml.Drawing.Blip>().FirstOrDefault();
                            if (blip != null)
                            {
                                var embed = blip.Embed?.Value;
                                if (embed != null)
                                {
                                    var imagePart = (ImagePart)wordDoc.MainDocumentPart.GetPartById(embed);
                                    using (var stream = imagePart.GetStream())
                                    {
                                        using (var ms = new MemoryStream())
                                        {
                                            stream.CopyTo(ms);
                                            string base64Image = Convert.ToBase64String(ms.ToArray());
                                            string imageFormat = imagePart.ContentType.Split('/').Last();
                                            images.Add(new { ID = elementId, Type = "Image", Content = $"data:image/{imageFormat};base64,{base64Image}" });
                                        }
                                    }
                                }
                            }
                        }
                        documentElements.AddRange(images);
                    }
                    else if (element is BookmarkStart bookmarkStart)
                    {
                        documentElements.Add(new { ID = elementId, Type = "BookmarkStart", Name = bookmarkStart.Name, BookmarkId = bookmarkStart.Id });
                    }
                    else if (element is BookmarkEnd bookmarkEnd)
                    {
                        documentElements.Add(new { ID = elementId, Type = "BookmarkEnd", BookmarkId = bookmarkEnd.Id });
                    }
                    else if (element is SdtBlock sdtBlock)
                    {
                        // --- START Checkbox Handling for Block-level Content Controls ---
                        var sdtContentCheckbox = sdtBlock.SdtProperties?.GetFirstChild<DocumentFormat.OpenXml.Wordprocessing.CheckBox>();
                        if (sdtContentCheckbox != null)
                        {
                            // CORRECTED LINE: Get the 'Checked' child element
                            var checkedState = sdtContentCheckbox.GetFirstChild<DocumentFormat.OpenXml.Wordprocessing.Checked>();

                            // Now access its Val property
                            bool isChecked = checkedState?.Val?.Value ?? false; // Use null-conditional operator for safety

                            string checkboxText = sdtBlock.GetFirstChild<SdtContentRun>()?.InnerText.Trim() ?? ""; // Get any text inside the content control

                            documentElements.Add(new
                            {
                                ID = elementId,
                                Type = "Checkbox",
                                IsChecked = isChecked,
                                Content = checkboxText // You might want to get the specific text, not just innerText
                            });
                            continue; // Skip further processing for this block as it's a checkbox
                        }
                        // --- END Checkbox Handling for Block-level Content Controls ---

                        string title = sdtBlock.SdtProperties.GetFirstChild<SdtAlias>()?.Val?.Value;
                        string text = sdtBlock.InnerText;
                        documentElements.Add(new { ID = elementId, Type = "ContentControl", Title = title, Content = text });
                    }
                    else if (element is Run runElement)
                    {
                        var textElement = runElement.GetFirstChild<Text>();
                        if (textElement != null)
                        {
                            string text = textElement.Text;
                            var runProperties = runElement.RunProperties;
                            var formatting = new Dictionary<string, bool>();
                            if (runProperties != null)
                            {
                                if (runProperties.Bold != null) formatting["Bold"] = true;
                                if (runProperties.Italic != null) formatting["Italic"] = true;
                                if (runProperties.Underline != null) formatting["Underline"] = true;
                            }
                            documentElements.Add(new { ID = elementId, Type = "Run", Content = new { Text = text, Formatting = formatting } });
                        }
                    }
                    else
                    {
                        documentElements.Add(new { ID = elementId, Type = element.GetType().Name, Content = element.InnerText, });
                    }
                }
            }
            return new
            {
                defualtdocumentDirection = defualtdocumentDirection,
                Direction = documentDirection,
                Elements = documentElements
            };
        }
        public static string GetBorderStyle(BorderType border)
        {


            // عندما تكون "nil" مكتوبة صراحةً في XML
            return border?.Val == "nil" ? "None" : border?.Val?.ToString().Replace("single", "solid");
        }
        public static NewDoc ConvertJsonToDocx(string jsonInput, string filePath, string id)
        {
            return ConvertJsonToDocx(jsonInput, filePath, id, null);
        }

        public static NewDoc ConvertJsonToDocx(string jsonInput, string filePath, string id, string recordID)
        {
            if (string.IsNullOrEmpty(filePath) || filePath.Contains(".."))
            {
                return new NewDoc() { success = false, message = "مسار الملف غير صالح." };
            }

            string docsDirectory = HttpRuntime.AppDomainAppPath;
            string originalFilePath = Path.Combine(docsDirectory, filePath.Replace('/', '\\'));

            if (string.IsNullOrEmpty(jsonInput))
            {
                return new NewDoc() { success = false, message = "البيانات غير موجودة." };
            }

            if (string.IsNullOrEmpty(id) || id.Contains("..") || id.IndexOfAny(Path.GetInvalidPathChars()) >= 0)
            {
                return new NewDoc() { success = false, message = "معرّف ID غير صالح." };
            }

            if (!Directory.Exists(docsDirectory)) Directory.CreateDirectory(docsDirectory);

            if (!System.IO.File.Exists(originalFilePath))
            {
                return new NewDoc() { success = false, message = "لم يتم العثور على ملف القالب." };
            }

            var documentElements = System.Text.Json.JsonSerializer.Deserialize<List<JsonElement>>(jsonInput);
            byte[] originalFileBytes = System.IO.File.ReadAllBytes(originalFilePath);

            using (MemoryStream memStream = new MemoryStream())
            {
                memStream.Write(originalFileBytes, 0, originalFileBytes.Length);
                memStream.Position = 0;

                using (WordprocessingDocument wordDoc = WordprocessingDocument.Open(memStream, true))
                {
                    var body = wordDoc.MainDocumentPart.Document.Body;
                    var bodyElements = body.Elements().ToList();
                    int elementId = 0;

                    foreach (var element in bodyElements)
                    {
                        elementId++;
                        var jsonElement = documentElements.FirstOrDefault(e => e.TryGetProperty("ID", out var idProp) && idProp.GetInt32() == elementId);

                        if (jsonElement.ValueKind != JsonValueKind.Undefined)
                        {
                            string type = jsonElement.GetProperty("Type").GetString();
                            switch (type)
                            {
                                // --- START: MODIFIED PARAGRAPH LOGIC ---

                                case "Paragraph":
                                    if (element is Paragraph para)
                                    {
                                        string newContent = ""; // القيمة الافتراضية هي نص فارغ

                                        // محاولة قراءة النص الجديد من الـ JSON
                                        if (jsonElement.TryGetProperty("Content", out var contentProp) && contentProp.ValueKind == JsonValueKind.Array)
                                        {
                                            var contentArray = contentProp.EnumerateArray().FirstOrDefault();
                                            if (contentArray.ValueKind == JsonValueKind.Object && contentArray.TryGetProperty("Text", out var textProp))
                                            {
                                                newContent = textProp.GetString();
                                            }
                                        }

                                        // 1. امسح كل المحتوى القديم (Runs) من الفقرة بشكل مطلق
                                        para.RemoveAllChildren<Run>();

                                        // 2. أنشئ Run جديدًا ليحمل النص الجديد
                                        Run newRun = new Run();

                                        // 3. حافظ على تنسيق الخط الافتراضي للفقرة
                                        if (para.ParagraphProperties?.ParagraphMarkRunProperties != null)
                                        {
                                            newRun.Append(new RunProperties(para.ParagraphProperties.ParagraphMarkRunProperties.OuterXml));
                                        }

                                        newRun.Append(new Text(newContent) { Space = SpaceProcessingModeValues.Preserve });

                                        // 4. أضف الـ Run الجديد إلى الفقرة
                                        para.Append(newRun);
                                    }
                                    break;
                                // --- END: MODIFIED PARAGRAPH LOGIC ---

                                // --- START: MODIFIED TABLE LOGIC ---
                                case "Table":
                                    if (element is Table table)
                                    {
                                        var jsonRows = jsonElement.GetProperty("Content").EnumerateArray().ToList();
                                        var docxRows = table.Elements<TableRow>().ToList();

                                        for (int i = 0; i < docxRows.Count && i < jsonRows.Count; i++)
                                        {
                                            var docxRow = docxRows[i];
                                            var jsonRowCells = jsonRows[i].GetProperty("Cells").EnumerateArray().ToList();
                                            var docxCells = docxRow.Elements<TableCell>().ToList();
                                            int docxCellCursor = 0;

                                            for (int jsonCellIndex = 0; jsonCellIndex < jsonRowCells.Count; jsonCellIndex++)
                                            {
                                                while (docxCellCursor < docxCells.Count)
                                                {
                                                    var cellProps = docxCells[docxCellCursor].TableCellProperties;
                                                    if (cellProps?.VerticalMerge?.Val != null && cellProps.VerticalMerge.Val == MergedCellValues.Continue)
                                                    {
                                                        docxCellCursor++;
                                                    }
                                                    else
                                                    {
                                                        break;
                                                    }
                                                }
                                                if (docxCellCursor >= docxCells.Count) break;

                                                var docxCell = docxCells[docxCellCursor];
                                                var jsonCellData = jsonRowCells[jsonCellIndex];

                                                // --- START: FINAL CORRECTED LOGIC ---

                                                // Scenario 1: Cell contains a placeholder (e.g., "Name: ...")
                                                if (docxCell.InnerText.Contains("…") || docxCell.InnerText.Contains("..."))
                                                {
                                                    string cellText = null;
                                                    if (jsonCellData.TryGetProperty("Content", out var cellContentProp) && cellContentProp.ValueKind == JsonValueKind.String)
                                                    {
                                                        cellText = cellContentProp.GetString();
                                                    }

                                                    if (cellText != null)
                                                    {
                                                        // **الحل الجديد بناءً على فكرتك**

                                                        // 1. احصل على الفقرة الأولى في الخلية
                                                        Paragraph firstParagraph = docxCell.Elements<Paragraph>().FirstOrDefault();

                                                        // 2. تأكد من وجود فقرة واحدة على الأقل
                                                        if (firstParagraph != null)
                                                        {
                                                            // 3. احذف كل الفقرات الأخرى (إن وجدت) ما عدا الأولى
                                                            var paragraphsToRemove = docxCell.Elements<Paragraph>().Skip(1).ToList();
                                                            foreach (var p in paragraphsToRemove)
                                                            {
                                                                p.Remove();
                                                            }

                                                            // 4. الآن، قم بتفريغ الفقرة الأولى المتبقية من محتواها النصي
                                                            firstParagraph.RemoveAllChildren<Run>();

                                                            // 5. أضف المحتوى الجديد إلى نفس الفقرة المحتفظ بها
                                                            Run newRun = new Run();
                                                            if (firstParagraph.ParagraphProperties?.ParagraphMarkRunProperties != null)
                                                            {
                                                                newRun.Append(new RunProperties(firstParagraph.ParagraphProperties.ParagraphMarkRunProperties.OuterXml));
                                                            }
                                                            newRun.Append(new Text(cellText) { Space = SpaceProcessingModeValues.Preserve });
                                                            firstParagraph.Append(newRun);
                                                        }
                                                    }
                                                }
                                                // Scenario 2: Cell is completely empty
                                                else if (string.IsNullOrWhiteSpace(docxCell.InnerText))
                                                {
                                                    string cellText = "";
                                                    if (jsonCellData.TryGetProperty("Content", out var cellContentProp) && cellContentProp.ValueKind == JsonValueKind.String)
                                                    {
                                                        cellText = cellContentProp.GetString();
                                                    }

                                                    if (!string.IsNullOrEmpty(cellText))
                                                    {
                                                        Paragraph cellParagraph = docxCell.Elements<Paragraph>().FirstOrDefault();
                                                        if (cellParagraph == null)
                                                        {
                                                            cellParagraph = new Paragraph();
                                                            docxCell.Append(cellParagraph);
                                                        }

                                                        cellParagraph.RemoveAllChildren<Run>();

                                                        Run newRun = new Run();

                                                        ParagraphMarkRunProperties pMarkRpr = cellParagraph.ParagraphProperties?.ParagraphMarkRunProperties;
                                                        if (pMarkRpr != null)
                                                        {
                                                            RunProperties newRpr = new RunProperties(pMarkRpr.OuterXml);
                                                            newRun.Append(newRpr);
                                                        }

                                                        newRun.Append(new Text(cellText) { Space = SpaceProcessingModeValues.Preserve });
                                                        cellParagraph.Append(newRun);
                                                    }
                                                }
                                                // --- END: FINAL CORRECTED LOGIC ---

                                                int gridSpan = 1;
                                                if (jsonCellData.TryGetProperty("GridSpan", out var gsProp))
                                                {
                                                    gridSpan = gsProp.GetInt32();
                                                }
                                                docxCellCursor += gridSpan;
                                            }
                                        }
                                    }
                                    break;
                                // --- END: MODIFIED TABLE LOGIC ---

                                case "Checkbox":
                                    Action<CheckBox, bool> updateCheckbox = (checkbox, isChecked) =>
                                    {
                                        if (checkbox != null)
                                        {
                                            var existingChecked = checkbox.GetFirstChild<DocumentFormat.OpenXml.Wordprocessing.Checked>();
                                            if (existingChecked != null)
                                            {
                                                existingChecked.Remove();
                                            }
                                            if (isChecked)
                                            {
                                                checkbox.Append(new DocumentFormat.OpenXml.Wordprocessing.Checked() { Val = OnOffValue.FromBoolean(true) });
                                            }
                                        }
                                    };

                                    bool isCheckedValue = false;
                                    if (jsonElement.TryGetProperty("IsChecked", out var isCheckedProp))
                                    {
                                        isCheckedValue = isCheckedProp.GetBoolean();
                                    }

                                    if (element is SdtBlock sdtBlock)
                                    {
                                        var checkbox = sdtBlock.SdtProperties.GetFirstChild<CheckBox>();
                                        updateCheckbox(checkbox, isCheckedValue);
                                    }
                                    else if (element is Paragraph paraWithCheckbox)
                                    {
                                        var sdtRun = paraWithCheckbox.GetFirstChild<SdtRun>();
                                        if (sdtRun != null)
                                        {
                                            var checkbox = sdtRun.SdtProperties.GetFirstChild<CheckBox>();
                                            updateCheckbox(checkbox, isCheckedValue);
                                        }
                                    }
                                    break;
                            }
                        }
                    }

                    if (!string.IsNullOrEmpty(recordID))
                    {
                        if (invoice.IsValidUniqueId(recordID))
                        {
                            DataTable dtRecord = DBHelper.gettabel("select ID,document_name,Department_name,sections_name,file_path,Document_status_name,Document_number,Document_date,notes,Email,Branch_name,begin_date,company_id from DC_Documents_records_single_id('" + recordID.Replace("'", "''") + "')");
                            if (dtRecord.Rows.Count > 0)
                            {
                                try
                                {
                                    DateTime documentDate = Convert.ToDateTime(dtRecord.Rows[0]["Document_date"]);
                                    string documentNumber = dtRecord.Rows[0]["Document_number"].ToString();
                                    string userCreated = dtRecord.Rows[0]["Email"].ToString();
                                    DateTime createdTime = Convert.ToDateTime(dtRecord.Rows[0]["begin_date"]);
                                    string userPrinted = DBHelper.UserEmail("");
                                    DateTime printTime = DateTime.Now;
                                    Table footerTable = CreateFooterTable(documentDate, documentNumber, createdTime, userCreated, userPrinted, printTime);
                                    body.Append(new Paragraph());

                                    body.Append(footerTable);
                                }
                                catch { }
                            }
                            else
                            {
                                string userPrinted = DBHelper.UserEmail("");
                                DateTime printTime = DateTime.Now;
                                string errorFooterText = $"Printe by: {userPrinted} Printe time: {printTime:yyyy-MM-dd hh:mm tt} ";
                                Paragraph errorFooterParagraph = CreateFooterParagraph(errorFooterText);
                                body.Append(errorFooterParagraph);
                            }
                        }
                    }
                    wordDoc.MainDocumentPart.Document.Save();
                }
                byte[] fileBytes = memStream.ToArray();
                return new NewDoc() { success = true, message = "تم الحفظ بنجاح", fileBytes = fileBytes };
            }
        }


        private static Table CreateFooterTable(DateTime documentDate, string documentNumber, DateTime createdTime, string userCreated, string userPrinted, DateTime printTime)
        {
            Table table = new Table();
            TableProperties tblProps = new TableProperties(new TableBorders(
                new TopBorder { Val = new EnumValue<BorderValues>(BorderValues.None) },
                new BottomBorder { Val = new EnumValue<BorderValues>(BorderValues.None) },
                new LeftBorder { Val = new EnumValue<BorderValues>(BorderValues.None) },
                new RightBorder { Val = new EnumValue<BorderValues>(BorderValues.None) },
                new InsideHorizontalBorder { Val = new EnumValue<BorderValues>(BorderValues.None) },
                new InsideVerticalBorder { Val = new EnumValue<BorderValues>(BorderValues.None) }
            ));

            // **الحل: أضف هذا السطر لجعل عرض الجدول 100% من الصفحة**
            // القيمة 5000 مع النوع Pct تعني 100% (5000/50)
            tblProps.Append(new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct });

            table.AppendChild(tblProps);
            TableRow row = new TableRow();
            row.Append(
                CreateTableCell($"Document Number:({documentNumber})"),
                CreateTableCell($"Created Time: {createdTime:yyyy-MM-dd hh:mm tt}", "2400"),
                CreateTableCell($"Created By: {userCreated}"),
                CreateTableCell($"Printed By: {userPrinted}"),
                CreateTableCell($"Print Time: {printTime:yyyy-MM-dd hh:mm tt}", "2400")
            );
            table.Append(row);
            return table;
        }

        private static TableCell CreateTableCell(string text)
        {
            TableCell cell = new TableCell();
            Paragraph p = new Paragraph(new Run(new Text(text) { Space = SpaceProcessingModeValues.Preserve }));
            cell.Append(p);
            TableCellProperties tcp = new TableCellProperties(new TableCellWidth { Type = TableWidthUnitValues.Auto });
            cell.Append(tcp);
            return cell;
        }
        private static TableCell CreateTableCell(string text, string Width)
        {
            TableCell cell = new TableCell();
            Paragraph p = new Paragraph(new Run(new Text(text) { Space = SpaceProcessingModeValues.Preserve }));
            cell.Append(p);
            TableCellProperties tcp = new TableCellProperties(
                new TableCellWidth { Type = TableWidthUnitValues.Dxa, Width = Width } // Set a minimum width (e.g., 2000 twips = ~1.39 inches)
            );
            cell.Append(tcp);
            return cell;
        }



        private static Paragraph CreateFooterParagraph(string text)
        {
            return new Paragraph(new Run(new Text(text) { Space = SpaceProcessingModeValues.Preserve }));
        }

        public static NewDoc ConvertJsonToDocxToPDF(string jsonInput, string filePath, string id, string recordID)
        {
            try
            {
                NewDoc docxResult = ConvertJsonToDocx(jsonInput, filePath, id, recordID);
                if (!docxResult.success)
                {
                    return docxResult;
                }
                byte[] pdfBytes = ConvertDocxToPdf(docxResult.fileBytes);
                return new NewDoc() { success = true, message = "تم التحويل بنجاح", fileBytes = pdfBytes };
            }
            catch (Exception ex)
            {
                return new NewDoc() { success = false, message = ex.Message };
            }
        }

        public static NewDoc ConvertJsonToDocxToHTML(string jsonInput, string filePath, string id, string recordID)
        {
            try
            {
                NewDoc docxResult = ConvertJsonToDocx(jsonInput, filePath, id, recordID);
                if (!docxResult.success)
                {
                    return docxResult;
                }
                byte[] htlBytes = ConvertDocxToHtml(docxResult.fileBytes);
                return new NewDoc() { success = true, message = "تم التحويل بنجاح", fileBytes = htlBytes };
            }
            catch (Exception ex)
            {
                return new NewDoc() { success = false, message = ex.Message };
            }
        }

        public static byte[] ConvertDocxToPdf(byte[] docxBytes)
        {
            using (MemoryStream docxStream = new MemoryStream(docxBytes))
            {
                Spire.Doc.Document document = new Spire.Doc.Document(docxStream, Spire.Doc.FileFormat.Docx);
                using (MemoryStream pdfStream = new MemoryStream())
                {
                    document.SaveToStream(pdfStream, Spire.Doc.FileFormat.PDF);
                    return pdfStream.ToArray();
                }
            }
        }

        public static byte[] ConvertDocxToHtml(byte[] docxBytes)
        {
            using (MemoryStream docxStream = new MemoryStream(docxBytes))
            {
                Spire.Doc.Document document = new Spire.Doc.Document(docxStream, Spire.Doc.FileFormat.Docx);
                document.HtmlExportOptions.ImageEmbedded = true;
                using (MemoryStream htmlStream = new MemoryStream())
                {
                    document.SaveToStream(htmlStream, Spire.Doc.FileFormat.Html);
                    return htmlStream.ToArray();
                }
            }
        }
    }

    public string GetPar(string key, HttpRequestBase request)
    {

        return Mas.com.eg.Models.invoice.GetPar(key, request);
    }
    private static MemoryStream CopyToMemoryStream(Stream inputStream)
    {
        inputStream.Position = 0;
        var memoryStream = new MemoryStream();
        inputStream.CopyTo(memoryStream);
        memoryStream.Position = 0;
        return memoryStream;
    }
    private static string ReadRequestBody(HttpRequestBase Request)
    {
        var memoryStream = CopyToMemoryStream(Request.InputStream);

        memoryStream.Position = 0;
        using (var reader = new StreamReader(memoryStream))
        {
            return reader.ReadToEnd();
        }
    }



        }

@{


    string id = ViewBag.id;
        string dataResult = "";
        string contentType = "application/json; charset=utf-8";
        byte[] fileBytes = null; // Initialize to null
        string filename = "template";
        Layout = null;

    if (id == "read")
    {
        string filePath = GetPar("filePath", Request);

        dataResult = JsonConvert.SerializeObject(new { success = true, json = DocxToJsonConverter2.ConvertDocxToJson(filePath), filePath = filePath });

    try
    {


    }
    catch (Exception ex)
    {
        dataResult = JsonConvert.SerializeObject(new { success = false, message = ex.Message });
    }
    }
    else if (id == "upload")
    {
        string filePath = GetPar("filePath", Request);
        HttpPostedFileBase uploadedFile = null;

        if (Request.Files.Count > 0)
        {
            uploadedFile = Request.Files[0];


            if (uploadedFile != null && uploadedFile.ContentLength > 0)
            {
                if (string.IsNullOrEmpty(filePath))
                {
                    dataResult = JsonConvert.SerializeObject(new { success = false, message = "مسار الملف غير صالح." });

                }

                if (filePath.Contains(".."))
                {
                    dataResult = JsonConvert.SerializeObject(new { success = false, message = "مسار الملف غير صالح." });
                }

                if (!filePath.StartsWith("Docs\\"))
                {
                    dataResult = JsonConvert.SerializeObject(new { success = false, message = "مسار الملف غير صالح." });
                }

                string docsDirectory = HttpRuntime.AppDomainAppPath;
                string absolutePath = Path.Combine(docsDirectory, filePath.Replace('/', '\\'));

                if (!absolutePath.StartsWith(docsDirectory, StringComparison.InvariantCultureIgnoreCase))
                {
                    dataResult = JsonConvert.SerializeObject(new { success = false, message = "مسار الملف غير مسموح به ." });
                }

                if (!System.IO.File.Exists(absolutePath))
                {
                    //dataResult = JsonConvert.SerializeObject(new { success = false, message =  "لم يتم العثور على الملف." });

                }
                string fileName = System.IO.Path.GetFileName(uploadedFile.FileName);
                // string path = Server.MapPath("~/App_Data/Uploads/" + fileName); // مثال لمسار الحفظ
                uploadedFile.SaveAs(absolutePath);
                dataResult = JsonConvert.SerializeObject(new { success = true, message = "تم رفع الملف بنجاح:" + fileName });

            }
            else
            {
                dataResult = JsonConvert.SerializeObject(new { success = false, message = "لم يتم تحديد ملف أو الملف فارغ." });

            }
        }
        else
        {
            dataResult = JsonConvert.SerializeObject(new { success = false, message = "لم يتم تحديد ملف أو الملف فارغ." });

        }

        try
        {


        }
        catch (Exception ex)
        {
            dataResult = JsonConvert.SerializeObject(new { success = false, message = ex.Message });
        }
    }
    else if (id == "fullObject")
    {
        string filePath = GetPar("filePath", Request);
        try
        {
            string docsDirectory = HttpRuntime.AppDomainAppPath;
            string absolutePath = Path.Combine(docsDirectory, filePath.Replace('/', '\\'));

            if (!System.IO.File.Exists(absolutePath))
            {
                dataResult = JsonConvert.SerializeObject(new { success = false, message = "لم يتم العثور على الملف." });
            }
            else
            {
                using (WordprocessingDocument wordDoc = WordprocessingDocument.Open(absolutePath, false))
                {
                    var body = wordDoc.MainDocumentPart.Document.Body;

                    Newtonsoft.Json.Linq.JObject fullJson = ConvertElementToJson(body);

                    dataResult = JsonConvert.SerializeObject(new { success = true, documentTree = fullJson }, Formatting.Indented);
                }
            }
        }
        catch (Exception ex)
        {
            dataResult = JsonConvert.SerializeObject(new { success = false, message = ex.Message });
        }
    }
    else
    if (id == "write")
    {
        string filePath = GetPar("filePath", Request);
        string jsonInput = GetPar("jsonInput", Request);
        filename = Path.GetFileNameWithoutExtension(filePath);
        string docid = GetPar("docid", Request);
        string recordid = GetPar("recordid", Request);

        try
        {
            DocxToJsonConverter2.NewDoc resPonDoc = DocxToJsonConverter2.ConvertJsonToDocx(jsonInput, filePath, docid, recordid);

            if (resPonDoc.success == false)
            {
                dataResult = JsonConvert.SerializeObject(resPonDoc);

            }
            else
            {
                contentType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
                fileBytes = resPonDoc.fileBytes;
            }

        }
        catch (Exception ex)
        {
            dataResult = JsonConvert.SerializeObject(new { success = false, message = ex.Message });
        }
    }
    else
    if (id == "pdf")
    {
        string filePath = GetPar("filePath", Request);
        string jsonInput = GetPar("jsonInput", Request);
        filename = Path.GetFileNameWithoutExtension(filePath);
        string docid = GetPar("docid", Request);
        string recordid = GetPar("recordid", Request);

        try
        {
            DocxToJsonConverter2.NewDoc resPonDoc = DocxToJsonConverter2.ConvertJsonToDocxToPDF(jsonInput, filePath, docid, recordid);

            if (resPonDoc.success == false)
            {
                dataResult = JsonConvert.SerializeObject(resPonDoc);

            }
            else
            {
                contentType = "application/pdf";
                fileBytes = resPonDoc.fileBytes;
            }

        }
        catch (Exception ex)
        {
            dataResult = JsonConvert.SerializeObject(new { success = false, message = ex.Message });
        }
    }
    else
    if (id == "html")
    {
        string filePath = GetPar("filePath", Request);
        string jsonInput = GetPar("jsonInput", Request);
        filename = Path.GetFileNameWithoutExtension(filePath);
        string docid = GetPar("docid", Request);
        string recordid = GetPar("recordid", Request);

        try
        {
            DocxToJsonConverter2.NewDoc resPonDoc = DocxToJsonConverter2.ConvertJsonToDocxToHTML(jsonInput, filePath, docid, recordid);

            if (resPonDoc.success == false)
            {
                dataResult = JsonConvert.SerializeObject(resPonDoc);

            }
            else
            {
                contentType = "text/html";

                string htmlContent = System.Text.Encoding.UTF8.GetString(resPonDoc.fileBytes);

                string css = "<style type=\"text/css\" media=\"print\"> " +
                         "table, th, td { -webkit-print-color-adjust: exact !important; print-color-adjust: exact !important; } " +
                             "</style>";

                // البحث عن وسم </head> لإدراج CSS بداخله
                int headIndex = htmlContent.IndexOf("</head>", StringComparison.InvariantCultureIgnoreCase);
                if (headIndex >= 0)
                {
                    htmlContent = htmlContent.Insert(headIndex, css);
                }
                else
                {
                    // إذا لم يكن هناك وسم <head>, إضافة CSS في بداية المحتوى
                    htmlContent = css + htmlContent;
                }
                htmlContent = htmlContent.Replace("Evaluation Warning: The document was created with Spire.Doc for .NET.", "");
                // تحويل السلسلة النصية مرة أخرى إلى بايتات
                fileBytes = System.Text.Encoding.UTF8.GetBytes(htmlContent);
            }

        }
        catch (Exception ex)
        {
            dataResult = JsonConvert.SerializeObject(new { success = false, message = ex.Message });
        }
    }

    Response.ContentType = contentType;

    if (dataResult == "")
    {

        dataResult = JsonConvert.SerializeObject(new { result = "No Data", requestInfo = Mas.com.eg.Models.invoice.request_data(Request) },
    Formatting.None,
    new JsonSerializerSettings()
    {
        ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
    });
    }
    if (fileBytes != null)
    {
        string extension = "";
        if (contentType == "application/pdf")
        {
            extension = ".pdf";
        }
        else if (contentType == "text/html")
        {
            extension = ".html";
        }
        else if (contentType == "application/vnd.openxmlformats-officedocument.wordprocessingml.document")
        {
            extension = ".docx";
        }

        Response.ContentType = contentType;
        if (contentType != "text/html")
        {
            Response.AddHeader("Content-Disposition", $"attachment; filename={filename}{extension}");
        }
        Response.BinaryWrite(fileBytes);
    }
    else
    {
        Response.ContentType = contentType;
        Response.Write(dataResult);
    }


    HttpContext.Current.Response.Flush();
    HttpContext.Current.Response.End();
}
